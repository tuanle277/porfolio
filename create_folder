
# Create directory structure
echo "Creating directory structure..."
mkdir -p src/styles
mkdir -p src/layouts
mkdir -p src/components
mkdir -p src/pages
mkdir -p public/scripts
mkdir -p public # Ensure public exists for favicon

# Create astro.config.mjs
echo "Creating astro.config.mjs..."
cat << 'EOF' > astro.config.mjs
// FILE: astro.config.mjs
// This is the main configuration file for your Astro project.
// It includes the Tailwind CSS integration.

import { defineConfig } from 'astro/config';
import tailwind from "@astrojs/tailwind"; // Import the Tailwind integration

// https://astro.build/config
export default defineConfig({
  integrations: [
    // Enable Tailwind CSS integration
    tailwind()
  ]
});
EOF

# Create tailwind.config.mjs
echo "Creating tailwind.config.mjs..."
cat << 'EOF' > tailwind.config.mjs
// FILE: tailwind.config.mjs
// This file configures Tailwind CSS.
// You can customize theme settings (colors, fonts, etc.) here.

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'], // Files Tailwind should scan
  theme: {
    extend: {
      // Add custom theme extensions here (e.g., colors, fonts)
      fontFamily: {
        // Use 'Inter' font family (make sure to import it in Layout.astro)
        sans: ['Inter', 'sans-serif'],
      },
      animation: {
        // Simple fade-in animation
        'fade-in-up': 'fadeInUp 0.8s ease-out forwards',
      },
      keyframes: {
        fadeInUp: {
          '0%': { opacity: '0', transform: 'translateY(20px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
      },
    },
  },
  plugins: [], // Add any Tailwind plugins here
}
EOF

# Create src/styles/global.css
echo "Creating src/styles/global.css..."
cat << 'EOF' > src/styles/global.css
// FILE: src/styles/global.css
// Contains base styles and Tailwind directives.

// Import Tailwind's base, components, and utilities layers
@tailwind base;
@tailwind components;
@tailwind utilities;

// Add any custom base styles here
@layer base {
  html {
    @apply scroll-smooth; // Enable smooth scrolling
  }
  body {
    @apply bg-gray-50 text-gray-800 dark:bg-gray-900 dark:text-gray-100 transition-colors duration-300; // Basic background and text colors, with dark mode support
    font-family: 'Inter', sans-serif; // Apply Inter font globally
  }
  /* Style for elements that will be animated on scroll */
  .animate-on-scroll {
    opacity: 0; /* Start hidden */
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }
  .animated {
    /* Class added by JS when element is visible */
    animation: fadeInUp 0.8s ease-out forwards;
  }

  /* Basic styling for links */
  a {
      @apply text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 transition-colors;
  }
}
EOF

# Create src/layouts/Layout.astro
echo "Creating src/layouts/Layout.astro..."
cat << 'EOF' > src/layouts/Layout.astro
// FILE: src/layouts/Layout.astro
// This is the main layout component wraps every page.
// It includes the <head> section (metadata, fonts, styles) and slots for page content.

---
// Import global styles
import '../styles/global.css';
// Import components used in the layout
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Define props the layout can accept (e.g., page title)
interface Props {
	title: string;
	description?: string; // Optional description for SEO
}

const { title, description = 'My Modern Portfolio' } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

        <meta name="description" content={description}>
        </head>
	<body class="flex flex-col min-h-screen">
        {/* Header component */}
		<Header />
        {/* Main content area where page content will be injected */}
		<main class="flex-grow container mx-auto px-4 py-8 md:py-12">
			<slot /> {/* Page content goes here */}
		</main>
        {/* Footer component */}
		<Footer />

        {/* Script for scroll animations */}
        <script src="/scripts/animations.js"></script>
	</body>
</html>
EOF

# Create src/components/Header.astro
echo "Creating src/components/Header.astro..."
cat << 'EOF' > src/components/Header.astro
// FILE: src/components/Header.astro
// A reusable header component for the site navigation.

---
// Define navigation links
const navLinks = [
    { name: 'Home', href: '/#home' },
    { name: 'About', href: '/#about' },
    { name: 'Projects', href: '/#projects' },
    { name: 'Contact', href: '/#contact' },
];
---
<header class="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md shadow-sm">
    <nav class="container mx-auto px-4 py-3 flex justify-between items-center">
        <a href="/#home" class="text-xl font-bold text-indigo-600 dark:text-indigo-400 hover:opacity-80 transition-opacity">
            [Your Name]
        </a>
        <ul class="hidden md:flex space-x-6">
            {navLinks.map(link => (
                <li>
                    <a href={link.href} class="text-gray-700 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors">
                        {link.name}
                    </a>
                </li>
            ))}
        </ul>
        {/* Basic Mobile Menu Toggle (Needs JS for full functionality) */}
        <button class="md:hidden text-gray-700 dark:text-gray-300 focus:outline-none">
             <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
            </svg>
        </button>
        {/* Add mobile menu dropdown here if needed */}
    </nav>
</header>
EOF

# Create src/components/Footer.astro
echo "Creating src/components/Footer.astro..."
cat << 'EOF' > src/components/Footer.astro
// FILE: src/components/Footer.astro
// A reusable footer component.

---
const currentYear = new Date().getFullYear();
---
<footer class="bg-gray-100 dark:bg-gray-800 mt-12 py-6">
    <div class="container mx-auto px-4 text-center text-gray-600 dark:text-gray-400 text-sm">
        <p>&copy; {currentYear} [Your Name]. All rights reserved.</p>
        <p class="mt-1">Built with <a href="https://astro.build/" target="_blank" rel="noopener noreferrer">Astro</a> & <a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">Tailwind CSS</a></p>
        {/* Add social media links here if desired */}
        <div class="mt-2 space-x-4">
            <a href="[Your GitHub Link]" target="_blank" rel="noopener noreferrer" aria-label="GitHub">GitHub</a>
            <a href="[Your LinkedIn Link]" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">LinkedIn</a>
            {/* Add more links */}
        </div>
    </div>
</footer>
EOF

# Create src/components/ProjectCard.astro
echo "Creating src/components/ProjectCard.astro..."
cat << 'EOF' > src/components/ProjectCard.astro
// FILE: src/components/ProjectCard.astro
// A reusable card component to display individual projects.

---
interface Props {
    title: string;
    description: string;
    imageUrl?: string; // Optional image URL
    imageAlt?: string; // Alt text for image
    tags?: string[];   // Tech tags (e.g., ['React', 'Node.js'])
    liveUrl?: string;  // Link to live demo
    repoUrl?: string;  // Link to code repository
}

const {
    title,
    description,
    imageUrl = 'https://placehold.co/600x400/e2e8f0/cbd5e0?text=Project+Image', // Placeholder image
    imageAlt = 'Project screenshot',
    tags = [],
    liveUrl,
    repoUrl
} = Astro.props;
---
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transform hover:scale-[1.02] transition-transform duration-300 ease-out animate-on-scroll">
    <img
        src={imageUrl}
        alt={imageAlt}
        class="w-full h-48 object-cover"
        onerror="this.onerror=null; this.src='https://placehold.co/600x400/e2e8f0/cbd5e0?text=Image+Error';"
    />
    <div class="p-6">
        <h3 class="text-xl font-semibold mb-2 text-gray-900 dark:text-white">{title}</h3>
        <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">{description}</p>

        {tags.length > 0 && (
            <div class="mb-4 flex flex-wrap gap-2">
                {tags.map(tag => (
                    <span class="bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200 text-xs font-medium px-2.5 py-0.5 rounded">
                        {tag}
                    </span>
                ))}
            </div>
        )}

        <div class="flex justify-end space-x-3">
            {liveUrl && (
                <a href={liveUrl} target="_blank" rel="noopener noreferrer" class="text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 px-4 py-2 rounded-md transition-colors">
                    Live Demo
                </a>
            )}
            {repoUrl && (
                <a href={repoUrl} target="_blank" rel="noopener noreferrer" class="text-sm font-medium text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 px-4 py-2 rounded-md transition-colors">
                    Code
                </a>
            )}
        </div>
    </div>
</div>
EOF

# Create src/components/Section.astro
echo "Creating src/components/Section.astro..."
cat << 'EOF' > src/components/Section.astro
// FILE: src/components/Section.astro
// A reusable component to wrap content sections with consistent padding and an ID.

---
interface Props {
    id: string;
    title: string;
    className?: string; // Allow passing additional classes
}

const { id, title, className = '' } = Astro.props;
---
<section id={id} class={`py-16 md:py-24 ${className}`}>
    <div class="container mx-auto px-4">
        <h2 class="text-3xl md:text-4xl font-bold text-center mb-12 text-gray-900 dark:text-white animate-on-scroll">
            {title}
        </h2>
        <slot /> {/* Section content goes here */}
    </div>
</section>
EOF

# Create src/pages/index.astro
echo "Creating src/pages/index.astro..."
cat << 'EOF' > src/pages/index.astro
// FILE: src/pages/index.astro
// The main homepage of the portfolio. It uses the Layout and various components.

---
import Layout from '../layouts/Layout.astro';
import Section from '../components/Section.astro';
import ProjectCard from '../components/ProjectCard.astro';

// Placeholder project data - replace with your actual projects
const projects = [
    {
        title: "Project One Title",
        description: "A brief description of project one, highlighting key features and technologies used.",
        tags: ["Astro", "Tailwind", "JavaScript"],
        liveUrl: "#", // Replace with actual URL
        repoUrl: "#", // Replace with actual URL
        imageUrl: "https://placehold.co/600x400/a3bffa/ffffff?text=Project+1",
    },
    {
        title: "Project Two Title",
        description: "Details about the second project, focusing on the problem it solves or its main purpose.",
        tags: ["React", "Node.js", "Express", "MongoDB"],
        liveUrl: "#",
        // repoUrl: "#", // Example: No repo link
        imageUrl: "https://placehold.co/600x400/facc15/000000?text=Project+2",
    },
     {
        title: "Project Three Title",
        description: "Showcasing another piece of work, perhaps with different technologies or a unique challenge.",
        tags: ["SvelteKit", "TypeScript", "Firebase"],
        // liveUrl: "#", // Example: No live demo link
        repoUrl: "#",
        imageUrl: "https://placehold.co/600x400/4ade80/ffffff?text=Project+3",
    },
];
---
<Layout title="[Your Name] - Portfolio" description="Welcome to the professional portfolio of [Your Name].">

    <section id="home" class="min-h-[60vh] flex items-center text-center md:text-left animate-on-scroll">
        <div class="container mx-auto px-4">
            <h1 class="text-4xl md:text-6xl font-bold mb-4 text-gray-900 dark:text-white">
                Hi, I'm <span class="text-indigo-600 dark:text-indigo-400">[Your Name]</span>
            </h1>
            <p class="text-xl md:text-2xl text-gray-700 dark:text-gray-300 mb-8">
                I'm a [Your Role, e.g., Web Developer, Designer, Engineer] passionate about building modern and engaging web experiences.
            </p>
            <a href="#projects" class="inline-block bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 text-white font-semibold py-3 px-8 rounded-lg shadow-md transition-colors duration-300">
                View My Work
            </a>
             <a href="#contact" class="ml-4 inline-block border border-indigo-600 dark:border-indigo-400 text-indigo-600 dark:text-indigo-400 hover:bg-indigo-50 dark:hover:bg-indigo-900/20 font-semibold py-3 px-8 rounded-lg shadow-md transition-colors duration-300">
                Get In Touch
            </a>
        </div>
    </section>

    <Section id="about" title="About Me" className="bg-gray-100 dark:bg-gray-800">
        <div class="max-w-3xl mx-auto text-center md:text-left grid md:grid-cols-3 gap-8 items-center">
             <div class="md:col-span-1 flex justify-center animate-on-scroll">
                 <img
                    src="https://placehold.co/200x200/e0e7ff/4f46e5?text=You"
                    alt="[Your Name]"
                    class="rounded-full w-40 h-40 md:w-48 md:h-48 object-cover shadow-lg"
                    onerror="this.onerror=null; this.src='https://placehold.co/200x200/e0e7ff/4f46e5?text=:)';"
                 />
             </div>
             <div class="md:col-span-2 animate-on-scroll" style="animation-delay: 0.2s;">
                <p class="text-lg text-gray-700 dark:text-gray-300 mb-4 leading-relaxed">
                    Hello! I'm [Your Name], a [Your Role] based in [Your Location]. I have a passion for [mention a key passion, e.g., clean code, user-centered design, solving complex problems].
                </p>
                <p class="text-lg text-gray-700 dark:text-gray-300 mb-4 leading-relaxed">
                    With experience in technologies like [mention 2-3 key skills/technologies, e.g., React, Node.js, Python], I enjoy turning ideas into reality through code. I'm always eager to learn and adapt to new challenges.
                </p>
                 <p class="text-lg text-gray-700 dark:text-gray-300 leading-relaxed">
                    [Add another sentence about your goals, interests, or what you're looking for].
                </p>
                {/* Optional: Link to Resume */}
                <div class="mt-6">
                     <a href="/[your-resume-filename].pdf" target="_blank" rel="noopener noreferrer" class="text-indigo-600 dark:text-indigo-400 font-semibold hover:underline">
                        View My Resume &rarr;
                    </a>
                </div>
            </div>
        </div>
    </Section>

    <Section id="projects" title="My Projects">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {projects.map((project, index) => (
                <div style={`animation-delay: ${index * 0.15}s;`}> {/* Stagger animation */}
                    <ProjectCard {...project} />
                </div>
            ))}
        </div>
        <p class="text-center mt-12 text-gray-600 dark:text-gray-400 animate-on-scroll">
            More projects available on my <a href="[Your GitHub Link]" target="_blank" rel="noopener noreferrer" class="font-semibold">GitHub</a>.
        </p>
    </Section>

    <Section id="contact" title="Get In Touch" className="bg-indigo-50 dark:bg-indigo-900/30">
        <div class="max-w-xl mx-auto text-center">
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-8 animate-on-scroll">
                I'm currently open to new opportunities and collaborations. Feel free to reach out!
            </p>
            {/* Simple Mailto Link - Replace with your email */}
            <a
                href="mailto:your.email@example.com"
                class="inline-block bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 text-white font-semibold py-3 px-8 rounded-lg shadow-md transition-colors duration-300 animate-on-scroll"
                style="animation-delay: 0.2s;"
            >
                Send Me an Email
            </a>
            {/* You could replace this with a contact form component later */}
            <div class="mt-8 text-gray-600 dark:text-gray-400 animate-on-scroll" style="animation-delay: 0.4s;">
                <p>You can also find me on:</p>
                <div class="mt-2 space-x-4">
                     <a href="[Your LinkedIn Link]" target="_blank" rel="noopener noreferrer" class="font-semibold">LinkedIn</a>
                     <a href="[Your GitHub Link]" target="_blank" rel="noopener noreferrer" class="font-semibold">GitHub</a>
                     {/* Add other relevant links (Twitter, etc.) */}
                </div>
            </div>
        </div>
    </Section>

</Layout>
EOF

# Create public/scripts/animations.js
echo "Creating public/scripts/animations.js..."
cat << 'EOF' > public/scripts/animations.js
// FILE: public/scripts/animations.js
// Simple JavaScript for scroll-triggered animations using Intersection Observer.

document.addEventListener('DOMContentLoaded', () => {
  // Select all elements that should be animated on scroll
  const animatedElements = document.querySelectorAll('.animate-on-scroll');

  // Fallback for browsers that don't support IntersectionObserver
  if (!('IntersectionObserver' in window)) {
    console.warn('IntersectionObserver not supported, animations disabled.');
    animatedElements.forEach(el => {
      // Make elements visible immediately if observer isn't supported
      el.style.opacity = '1';
    });
    return; // Exit if observer is not supported
  }

  // Create an Intersection Observer instance
  const observer = new IntersectionObserver((entries, observerInstance) => {
    entries.forEach(entry => {
      // If the element is intersecting (visible)
      if (entry.isIntersecting) {
        // Add the 'animated' class to trigger the CSS animation
        // The actual animation is defined in global.css
        entry.target.classList.add('animated');
        entry.target.style.opacity = '1'; // Ensure opacity is set for the animation

        // Optional: Unobserve the element after animation so it doesn't re-trigger
        // This prevents the animation from replaying if the user scrolls up and down.
        observerInstance.unobserve(entry.target);
      }
    });
  }, {
    // Options for the observer:
    threshold: 0.1, // Trigger when at least 10% of the element is visible in the viewport.
    // rootMargin: '0px 0px -50px 0px' // Optional: Adjust the trigger point.
    // Negative bottom margin makes it trigger slightly before the element fully enters the viewport edge.
  });

  // Observe each targeted element found on the page
  animatedElements.forEach(el => {
    // Set initial state for animation (already done via CSS, but good practice)
    el.style.opacity = '0';
    observer.observe(el);
  });
});
EOF

# Create public/favicon.svg
echo "Creating public/favicon.svg..."
cat << 'EOF' > public/favicon.svg
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="100" height="100">
  <circle cx="50" cy="50" r="45" fill="#4f46e5"/>
  <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" font-size="40" font-family="Arial, sans-serif" fill="#ffffff">YN</text> </svg>
EOF

# Create README.md
echo "Creating README.md..."
cat << 'EOF' > README.md
# Personal Portfolio ([Your Name])

This is the source code for my personal portfolio website, built with Astro and Tailwind CSS.

## Prerequisites

- Node.js (LTS recommended)
- pnpm (`npm install -g pnpm`)

## Development

1.  **Install dependencies:**
    ```bash
    pnpm install
    ```
    *(Run this command inside the `my-portfolio` directory after using the creation script)*

2.  **Start the development server:**
    ```bash
    pnpm dev
    ```
    The site will be available at `http://localhost:4321` (or another port if 4321 is busy).

## Build

To create a production-ready build:

```bash
pnpm build
```
The output will be in the `dist/` directory.

## Customization

-   Update personal information (`[Your Name]`, `[Your Role]`, etc.) primarily in `src/pages/index.astro`, `src/components/Header.astro`, and `src/components/Footer.astro`.
-   Replace placeholder project data in `src/pages/index.astro`.
-   Add your actual resume PDF to the `public/` folder and update the link in `src/pages/index.astro`.
-   Customize styling further in `tailwind.config.mjs` and `src/styles/global.css`.
-   Replace `public/favicon.svg` with your own icon.
-   Update links in `src/components/Footer.astro` and `src/pages/index.astro`.
EOF

